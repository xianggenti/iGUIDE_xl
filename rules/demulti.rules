# -*- mode: Snakemake -*-
# Demultiplexing Rules

rule demultiplex:
  input:
    sampleInfo=ancient(str(SAMPLEINFO_PATH)),
    R1=str(Path(config["Seq_Path"]) / config["R1"]),
    R2=str(Path(config["Seq_Path"]) / config["R2"]),
    I1=str(Path(config["Seq_Path"]) / config["I1"]),
    I2=str(Path(config["Seq_Path"]) / config["I2"])
  output:
    data=temp(expand(
      RUN_DIR + "/process_data/demulti/{sample}.{read_type}.fastq.gz", 
      sample=SAMPLES, read_type=READ_TYPES)),
    ambi=temp(expand(
      RUN_DIR + "/process_data/demulti/ambiguous.{read_type}.fastq.gz", 
      read_type=READ_TYPES)),
    dgen=temp(expand(
      RUN_DIR + "/process_data/demulti/degenerate.{read_type}.fastq.gz", 
      read_type=READ_TYPES)),
    unas=temp(expand(
      RUN_DIR + "/process_data/demulti/unassigned.{read_type}.fastq.gz", 
      read_type=READ_TYPES)),
    stat=temp(RUN_DIR + "/process_data/demulti/" + RUN + ".demulti.stat")
  params:
    tool=ROOT_DIR + "/tools/rscripts/demulti.R",
    readNamePatternArg=config["readNamePattern"],
    bc1Len=config["barcode1Length"],
    bc2Len=config["barcode2Length"],
    bc1=config["barcode1"],
    bc2=config["barcode2"],
    bc1Mis=config["bc1Mismatch"],
    bc2Mis=config["bc2Mismatch"],
    maxN=config["maxNcount"],
    statName=RUN + ".demulti.stat"
  log: 
    RUN_DIR + "/logs/demultiplex." + RUN + ".log"
  threads: 
    demulti_cores
  resources: 
    mem_mb=lambda wildcards, attempt: attempt * config["demultiMB"]
  shell:
    """
    Rscript {params.tool} -m {input.sampleInfo} \
      --read1 {input.R1} --read2 {input.R2} \
      --idx1 {input.I1} --idx2 {input.I2} \
      --bc1 {params.bc1} --bc1Len {params.bc1Len} \
      --bc2 {params.bc2} --bc2Len {params.bc2Len} \
      --bc1Mis {params.bc1Mis} --bc2Mis {params.bc2Mis} --maxN {params.maxN} \
      -o {RUN_DIR}/process_data/demulti --stat {params.statName} -c {threads} \
      --readNamePattern {params.readNamePatternArg} --compress > {log} 2>&1
    """

rule move_demulti_stat:
  input: RUN_DIR + "/process_data/demulti/" + RUN + ".demulti.stat"
  output: temp(RUN_DIR + "/process_data/stats/" + RUN + ".demulti.stat")
  resources:
    mem_mb=lambda wildcards, attempt: attempt * config["defaultMB"]
  shell: "mv {input} {output}"
