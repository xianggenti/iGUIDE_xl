# -*- mode: Snakemake -*-
# Sequence Alignment: BLAT

rule align:
  input:
    seq = RUN_DIR + "/process_data/consol/{sample}.{read}.{bin}.consol.fasta",
    genome = ancient(ROOT_DIR + "/genomes/" + config["Ref_Genome"] + ".2bit")
  output:
    temp(RUN_DIR + "/process_data/align/{sample}.{read}.{bin}.psl")
  params: 
    config["BLATparams"]
  log:
    RUN_DIR + "/logs/{sample}.{read}.{bin}.blat.log"
  resources:
    mem_mb = lambda wildcards, attempt: attempt * config["alignMB"]
  shell:
    """
    if [[ $(cat {input.seq} | wc -l) -eq 0 ]]
        then
            touch {output}
            echo 'Empty input sequences for {input.seq}.' > {log} 2>&1
        else
            blat {input.genome} {input.seq} {output} \
                {params} > {log} 2>&1
    fi
    """

rule compress_align:
  input: RUN_DIR + "/process_data/align/{sample}.{read}.{bin}.psl"
  output: temp(RUN_DIR + "/process_data/align/{sample}.{read}.{bin}.psl.gz")
  resources:
    mem_mb = lambda wildcards, attempt: attempt * config["defaultMB"]
  shell: "gzip {input}"

rule generate_ref:
  input: ancient("configs/" + RUN + ".config.yml")
  output: ROOT_DIR + "/genomes/" + config["Ref_Genome"] + ".2bit"
  params: config["Ref_Genome"]
  resources:
    mem_mb = lambda wildcards, attempt: attempt * config["defaultMB"]
  shell: 
    "Rscript {ROOT_DIR}/tools/rscripts/generate_ref_genome.R {params} {output}"

